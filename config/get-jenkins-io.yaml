global:
  ingress:
    enabled: true
    className: public-nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/ssl-redirect": "true"
      "nginx.ingress.kubernetes.io/use-regex": "true"  # Required to allow regexp path matching with Nginx
    hosts:
      - host: get.jenkins.io
        paths:
          - path: /
            backendService: httpd
          - path: /.*[.](deb|hpi|war|rpm|msi|pkg|sha256|md5sum|zip|gz|pdf|json|svg|sh|jpeg|ico|png|html)$  # Requires the regexp engine of Nginx to be enabled
            pathType: ImplementationSpecific
            backendService: mirrorbits
      - host: mirrors.jenkins.io
        paths:
          - path: /
            backendService: httpd
          - path: /.*[.](deb|hpi|war|rpm|msi|pkg|sha256|md5sum|zip|gz|pdf|json|svg|sh|jpeg|ico|png|html)$  # Requires the regexp engine of Nginx to be enabled
            pathType: ImplementationSpecific
            backendService: mirrorbits
      - host: mirrors.jenkins-ci.org
        paths:
          - path: /
            backendService: httpd
          - path: /.*[.](deb|hpi|war|rpm|msi|pkg|sha256|md5sum|zip|gz|pdf|json|svg|sh|jpeg|ico|png|html)$  # Requires the regexp engine of Nginx to be enabled
            pathType: ImplementationSpecific
            backendService: mirrorbits
      - host: fallback.get.jenkins.io
        paths:
          - path: /
            backendService: httpd
    tls:
      - secretName: get-jenkins-io-tls
        hosts:
          - get.jenkins.io
          - mirrors.jenkins.io
          - mirrors.jenkins-ci.org
          - fallback.get.jenkins.io
  storage:
    enabled: true
    claimNameTpl: '{{ include "mirrorbits-parent.pvc-name" $ }}'
    storageClassName: azurefile-csi-premium
    storageSize: 700Gi
    accessModes:
      - ReadOnlyMany
    persistentVolume:
      azureFile:
        resourceGroup: get-jenkins-io
        shareName: mirrorbits
        readOnly: true
      additionalSpec:
        persistentVolumeReclaimPolicy: Retain
        mountOptions:
          - dir_mode=0755
          - file_mode=0644
          - uid=1000
          - gid=1000
          - mfsymlinks
          - nobrl
          - serverino
          - cache=strict

mirrorbits:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 2
      memory: 2048Mi
    requests:
      cpu: 100m
      memory: 400Mi
  nodeSelector:
    kubernetes.io/arch: amd64
  podSecurityContext:
    runAsUser: 1000  # User 'mirrorbits'
    runAsGroup: 1000  # Group 'mirrorbits'
    runAsNonRoot: true
  containerSecurityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                  - mirrorbits
          topologyKey: "kubernetes.io/hostname"
  config:
    # Ingress already does gzip/brotli
    gzip: false
    traceFile: /TIME
    redis:
      address: jenkins-mirrorbits.redis.cache.windows.net:6379
      # password is stored in SOPS secrets
      ## RedisDB - Use 1 for staging and 0 for production
      dbId: 0
    ## Interval in minutes between mirrors scan
    scanInterval: 10
    ## Interval between two scans of the local repository.
    ## This should, more or less, match the frequency where the local repo is updated (e.g. update center)
    repositoryScanInterval: 5
    checkInterval: 1
    # Disable a mirror if it triggers HTTP/3xx redirects on its own (safer for mirrors we do not control)
    disallowRedirects: true
    # Disable a mirror if a missing file is requested (safer for mirrors we do not control)
    disableOnMissingFile: true
    ## List of mirrors to use as fallback which will be used in case mirrorbits
    ## is unable to answer a request because the database is unreachable.
    ## Note: Mirrorbits will redirect to one of these mirrors based on the user
    ## location but won't be able to know if the mirror has the requested file.
    ## Therefore only put your most reliable and up-to-date mirrors here.
    fallbacks:
      ## archives.jenkins.io has ALL the artefacts
      - url: https://archives.jenkins.io/
        countryCode: DE
        continentCode: EU
  geoipdata:
    persistentData:
      enabled: true
      capacity: 1Gi
      storageClassName: statically-provisionned
      csi:
        driver: file.csi.azure.com
        fsType: ext4
        nodeStageSecretRef:
          name: geoip-data
          namespace: geoip-data
        volumeAttributes:
          resourceGroup: publick8s
          shareName: geoip-data
        volumeHandle: https://publick8spvdata.file.core.windows.net/geoip-data
  annotations:
    ad.datadoghq.com/mirrorbits.logs: |
      [{"source":"mirrorbits","service":"get.jenkins.io"}]

httpd:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 50m
      memory: 500Mi
  nodeSelector:
    kubernetes.io/arch: arm64
  tolerations:
    - key: "kubernetes.io/arch"
      operator: "Equal"
      value: "arm64"
      effect: "NoSchedule"
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: "app.kubernetes.io/name"
                operator: In
                values:
                  - mirrorbits-files
          topologyKey: "kubernetes.io/hostname"

rsyncd:
  enabled: false

serviceaccount:
  enabled: false
