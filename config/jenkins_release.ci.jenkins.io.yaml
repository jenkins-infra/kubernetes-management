serviceAccount:
  create: true
  name: jenkins-release-controller
serviceAccountAgent:
  create: false
rbac:
  create: true
  readSecrets: true
persistence:
  enabled: true
  size: 50Gi
  storageClass: managed-csi-premium-retain
agent:
  componentName: "agent"
networkPolicy:
  # As of today, 2020-06-19, network policy is not supported for windows node
  # https://docs.microsoft.com/en-us/azure/aks/windows-node-limitations#are-all-features-supported-with-windows-nodes
  # This is a blocker for the release environment as in the current state,
  # windows containers are not allowed to connect on main Jenkins.
  # I disable it for now
  # enabled: true
  enabled: false
  internalAgents:
    allowed: true
    namespaceLabels:
      name: "jenkins-release"
controller:
  image: jenkinsciinfra/jenkins-lts
  tag: 0.32.5-2.401.3
  imagePullPolicy: IfNotPresent
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.azure.com/agentpool: linuxpool
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"
  probes:
    startupProbe:
      initialDelaySeconds: 120
    livenessProbe:
      initialDelaySeconds: 120
    readinessProbe:
      initialDelaySeconds: 120
  testEnabled: false
  overwritePlugins: true
  serviceType: "ClusterIP"
  javaOpts: >
    -XshowSettings:vm -XX:+UseStringDeduplication -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ -XX:+UseG1GC -Djava.net.preferIPv4Stack=true
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - usernamePassword:
                    description: "GitHub access token for jenkinsadmin"
                    id: "github-access-token"
                    username: "${GITHUB_USERNAME}"
                    password: "${GITHUB_PASSWORD}"
                    scope: GLOBAL
                - string:
                    scope: GLOBAL
                    id: "azure-vault-client-id"
                    secret: "${AZURE_VAULT_CLIENT_ID}"
                    description: Azure Service Principale client id used to retrieve gpg key
                - string:
                    scope: GLOBAL
                    id: "azure-vault-client-secret"
                    secret: "${AZURE_VAULT_CLIENT_SECRET}"
                    description: Azure Service Principale client secret used to retrieve gpg key
                - string:
                    scope: GLOBAL
                    id: "azure-vault-tenant-id"
                    secret: "${AZURE_VAULT_TENANT_ID}"
                    description: Azure Service Principale tenant id used to retrieve gpg key
                - string:
                    scope: GLOBAL
                    id: "fastly-api-token"
                    secret: "${FASTLY_API_TOKEN}"
                    description: Fastly api token used to purge pkg.jenkins.io cache
                - string:
                    scope: GLOBAL
                    id: "fastly_pkgserver_service_id"
                    secret: "${FASTLY_PKGSERVER_SERVICE_ID}"
                    description: Fastly pkgserver service id used for invalidating pkg.jenkins.io
                - string:
                    scope: GLOBAL
                    id: "release-gpg-passphrase"
                    secret: "${RELEASE_GPG_PASSPHRASE}"
                    description: Release GPG Key passphrase
                - string:
                    scope: GLOBAL
                    id: "release-gpg-passphrase-2023"
                    secret: "${RELEASE_GPG_PASSPHRASE_2023}"
                    description: Release GPG Key passphrase 2023 version
                - string:
                    scope: GLOBAL
                    id: "release-storage-account-key"
                    secret: "${RELEASE_STORAGE_ACCOUNT_KEY}"
                    description: Password used by maven to upload war files
                - string:
                    scope: GLOBAL
                    id: "gpg-storage-account-key"
                    secret: "${GPG_STORAGE_ACCOUNT_KEY}"
                    description: GPG storage account key
                - string:
                    scope: GLOBAL
                    id: "maven-repository-username"
                    secret: "${MAVEN_REPOSITORY_USERNAME}"
                    description: "Username used by maven release plugin to publish artifacts on a maven repository"
                - string:
                    scope: GLOBAL
                    id: "maven-repository-password"
                    secret: "${MAVEN_REPOSITORY_PASSWORD}"
                    description: "PASSWORD used by maven release plugin to publish artifacts on a maven repository"
                - string:
                    scope: GLOBAL
                    id: "maven-repository-username"
                    secret: "${MAVEN_REPOSITORY_USERNAME}"
                    description: GPG storage account key
                - string:
                    scope: GLOBAL
                    id: "sops-client-id"
                    secret: "${SOPS_CLIENT_ID}"
                    description: Azure client ID used by sops to decrypt secrets
                - string:
                    scope: GLOBAL
                    id: "sops-client-secret"
                    secret: "${SOPS_CLIENT_SECRET}"
                    description: Azure client secret used by sops to decrypt secrets
                - string:
                    scope: GLOBAL
                    id: "sops-tenant-id"
                    secret: "${SOPS_TENANT_ID}"
                    description: Azure tenant id used by sops to decrypt secrets
                - string:
                    scope: GLOBAL
                    id: "signing-cert-pass"
                    secret: "${RELEASE_CERTIFICATE_PASSWORD}"
                    description: Password used by maven signer plugin to unlock the signing certificate
                - string:
                    scope: GLOBAL
                    id: "signing-cert-pass-2023"
                    secret: "${RELEASE_CERTIFICATE_PASSWORD_2023}"
                    description: Password used by maven signer plugin to unlock the signing certificate 2023 version
                - basicSSHUserPrivateKey:
                    scope: GLOBAL
                    id: "release-key"
                    username: ${SSH_RELEASE_USERNAME}
                    description: "SSH private key to commit on jenkinsci/jenkins"
                    privateKeySource:
                      directEntry:
                        privateKey: ${SSH_RELEASE_PRIVKEY}
                - basicSSHUserPrivateKey:
                    scope: GLOBAL
                    id: "pkgserver"
                    username: ${SSH_PKGSERVER_USERNAME}
                    description: "SSH private key used to upload artifacts on pkg.jenkins.io"
                    privateKeySource:
                      directEntry:
                        privateKey: ${SSH_PKGSERVER_PRIVKEY}
                - basicSSHUserPrivateKey:
                    scope: GLOBAL
                    id: "charts-secrets"
                    username: ${SSH_CHARTS_SECRETS_USERNAME}
                    description: "SSH privkey used to access jenkins-infra/charts-secret"
                    privateKeySource:
                      directEntry:
                        privateKey: ${SSH_CHARTS_SECRETS_PRIVKEY}
                - basicSSHUserPrivateKey:
                    scope: SYSTEM
                    id: "ec2-agents-privkey"
                    username: "key"
                    description: "SSH privkey used to connect to EC2 agents"
                    privateKeySource:
                      directEntry:
                        privateKey: "${EC2_AGENTS_PRIVKEY}"
                - usernamePassword:
                    scope: GLOBAL
                    description: Docker hub credential for release.ci PULL
                    id: releasecijenkinsio-dockerhub-pull
                    username: releasecijenkinsio
                    password: "${DOCKER_HUB_TOKEN_RELEASECI_PULL}"
      agent-settings: |
        jenkins:
          numExecutors: 0
          clouds:
            - kubernetes:
                containerCapStr: "100"
                jenkinsUrl: "http://jenkins-release.jenkins-release.svc.cluster.local:8080"
                maxRequestsPerHostStr: "300"
                webSocket: true
                name: "kubernetes"
                namespace: "jenkins-release-agents"
                podRetention: "Never"
                podLabels:
                  - key: "jenkins/jenkins-release-agent"
                    value: "true"
                templates:
                  - name: jnlp-linux
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:latest-jdk11"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/java/openjdk/bin/java"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        args: "1d"
                        alwaysPullImage: true
                    yamlMergeStrategy: "merge"
                    yaml: |-
                      apiVersion: v1
                      kind: Pod
                      spec:
                        tolerations:
                        - key: "jenkins"
                          operator: "Equal"
                          value: "release.ci.jenkins.io"
                          effect: "NoSchedule"
                        - key: "kubernetes.azure.com/scalesetpriority"
                          operator: "Equal"
                          value: "spot"
                          effect: "NoSchedule"
                  - name: jnlp-windows
                    nodeSelector: "kubernetes.io/os=windows"
                    instanceCap: 5 # Usual sizing is 2 pods per Windows node, and max 3 windows nodes
                    instanceCapStr: "5"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:jdk11-windowsservercore-ltsc2019"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "C:/openjdk-11"
                        - envVar:
                            key: "JAVA_HOME"
                            value: "C:/openjdk-11"
                        command: "powershell"
                        args: "C:/ProgramData/Jenkins/jenkins-agent.ps1"
                        resourceLimitCpu: "1"
                        resourceLimitMemory: "1024Mi"
                        resourceRequestCpu: "1"
                        resourceRequestMemory: "1024Mi"
                        alwaysPullImage: true
                        workingDir: "C:\\Users\\jenkins"
                    yamlMergeStrategy: "override"
                    label: "windows-2019-kubernetes"
                    yaml: |-
                      affinity:
                        nodeAffinity:
                          requiredDuringSchedulingIgnoredDuringExecution:
                            nodeSelectorTerms:
                            - matchExpressions:
                              - key: kubernetes.io/os
                                operator: In
                                values:
                                  - windows
      jobs-settings: |
        jobs:
          - script: >
              folder('components') {
                displayName('Components')
                description('Folder containing Jenkins components release job')
              }

          - script: >
              multibranchPipelineJob('components/remoting') {
                displayName "Remoting"
                description "Jenkins Remoting"
                branchSources {
                  github {
                    id('2020052601')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                    includes('master')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/components/remoting')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }

          - script: >
              folder('core') {
                displayName('Core')
                description('Folder containing Jenkins core release job')
              }

          - script: >
              folder('core/weekly') {
                displayName('Weekly')
                description('Folder for weekly releases')
              }

          - script: >
              folder('core/stable') {
                displayName('Stable')
                description('Folder for stable releases')
              }
          - script: >
              folder('core/stable-rc') {
                displayName('Stable Release Candidates')
                description('Folder for stable release candidates')
              }

          - script: >
              multibranchPipelineJob('core/package') {
                displayName "Core Package"
                description "Jenkins Core Packaging"
                branchSources {
                  github {
                    id('2019092401')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/core/package')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }
          - script: >
              multibranchPipelineJob('core/release') {
                displayName "Core Release"
                description "Jenkins Core Release"
                branchSources {
                  github {
                    id('2019092402')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/core/release')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }

          - script: >
              multibranchPipelineJob('core/weekly/release') {
                displayName "Release"
                description "Jenkins Core Release"
                branchSources {
                  github {
                    id('2019092402')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                    includes('master')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/core/weekly')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }
          - script: >
              multibranchPipelineJob('core/stable/release') {
                displayName "Release"
                description "Jenkins Core Release"
                branchSources {
                  github {
                    id('2019092402')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/core/stable')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }
          - script: >
              multibranchPipelineJob('core/stable-rc/release') {
                displayName "Release"
                description "Jenkins Core Release"
                branchSources {
                  github {
                    id('2020121601')
                    scanCredentialsId('github-access-token')
                    repoOwner('jenkins-infra')
                    repository('release')
                  }
                }
                factory {
                  workflowBranchProjectFactory {
                    scriptPath('Jenkinsfile.d/core/stable-rc')
                  }
                }
                configure {
                  it / sources / 'data' / 'jenkins.branch.BranchSource' << {
                      strategy(class: 'jenkins.branch.DefaultBranchPropertyStrategy') {
                          properties(class: 'java.util.Arrays$ArrayList') {
                              a(class: 'jenkins.branch.BranchProperty-array') {
                                  'jenkins.branch.NoTriggerBranchProperty'()
                              }
                          }
                      }
                  }
                }
              }
      ldap-settings: |
        jenkins:
          securityRealm:
            ldap:
              configurations:
                - server: "${LDAP_SERVER}"
                  rootDN: "${LDAP_ROOT_DN}"
                  managerDN: "${LDAP_MANAGER_DN}"
                  managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
                  mailAddressAttributeName: "mail"
                  userSearch: cn={0}
                  userSearchBase: "ou=people"
                  groupSearchBase: "ou=groups"
              disableMailAddressResolver: false
              groupIdStrategy: "caseInsensitive"
              userIdStrategy: "caseInsensitive"
              cache:
                size: 100
                ttl: 300
      advisor-settings: |
        jenkins:
          disabledAdministrativeMonitors:
            - com.cloudbees.jenkins.plugins.advisor.Reminder
        advisor:
          acceptToS: true
          ccs:
          - "damien.duportal@gmail.com"
          email: "jenkins@oblak.com"
          excludedComponents:
            - "ItemsContent"
            - "GCLogs"
            - "Agents"
            - "RootCAs"
            - "SlaveLogs"
            - "HeapUsageHistogram"
          nagDisabled: true
      jenkins-url: |
        unclassified:
          location:
            url: "https://release.ci.jenkins.io"
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "GROUP:Overall/Administer:admins"
                - "GROUP:Overall/Administer:jenkins-admins"
                - "GROUP:Overall/Administer:release-core"
                - "GROUP:Overall/Read:authenticated"
                - "GROUP:Overall/SystemRead:authenticated"
                - "GROUP:Job/Build:release-core-dev"
                - "GROUP:Job/Cancel:release-core-dev"
                - "GROUP:Job/Read:authenticated"
      timestamper-settings: |
        unclassified:
          timestamper:
            allPipelines: true
      system-settings: |
        unclassified:
          defaultFolderConfiguration:
            # Keep healthMetrics an empty list to ensure weather is disabled
            healthMetrics: []
        jenkins:
          quietPeriod: 0 # No need to wait between build scheduling
          disabledAdministrativeMonitors:
            - "jenkins.security.QueueItemAuthenticatorMonitor"
        security:
          gitHostKeyVerificationConfiguration:
            sshHostKeyVerificationStrategy:
              manuallyProvidedKeyVerificationStrategy:
                approvedHostKeys: "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
  sidecars:
    configAutoReload:
      env:
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: METHOD
          # Polling mode (instead of watching kube API)
          value: "SLEEP"
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: SLEEP_TIME
          # Time in seconds between two polls
          value: "60"
  installPlugins: false
  ingress:
    enabled: true
    hostName: release.ci.jenkins.io
    ingressClassName: private-nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/proxy-body-size": "500m"
    tls:
      - hosts:
          - release.ci.jenkins.io
        secretName: release.ci.jenkins.io-cert
