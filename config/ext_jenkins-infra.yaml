serviceAccount:
  create: true
  name: jenkins-infra-controller
serviceAccountAgent:
  create: false
rbac:
  create: true
  readSecrets: true
persistence:
  enabled: true
  size: 50Gi
  storageClass: managed-csi-premium-retain
agent:
  componentName: "agent"
networkPolicy:
  enabled: true
  internalAgents:
    allowed: true
    namespaceLabels:
      name: "jenkins-infra"
controller:
  image: jenkinsciinfra/jenkins-weekly
  tag: 0.105.5-2.396
  imagePullPolicy: IfNotPresent
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.azure.com/agentpool: linuxpool
  resources:
    limits:
      cpu: "2"
      memory: "8Gi"
    requests:
      cpu: "2"
      memory: "8Gi"
  probes:
    startupProbe:
      initialDelaySeconds: 120
    livenessProbe:
      initialDelaySeconds: 120
    readinessProbe:
      initialDelaySeconds: 120
  testEnabled: false
  overwritePlugins: true
  serviceType: "ClusterIP"
  javaOpts: >-
    -XshowSettings:vm -XX:+UseStringDeduplication -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ -XX:+UseG1GC -Djava.net.preferIPv4Stack=true
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - gitHubApp:
                    appID: "${GITHUB_APP_ID}"
                    description: "GitHub App for infra.ci.jenkins.io"
                    id: "github-app-infra"
                    privateKey: "${GITHUB_APP_PRIVATE_KEY}"
                    scope: GLOBAL
                - gitHubApp:
                    appID: "${GITHUB_APP_JENKINS_INFRA_UPDATECLI_ID}"
                    description: "GitHub App for updatecli tasks on jenkins-infra org"
                    id: "github-app-updatecli-on-jenkins-infra"
                    privateKey: "${GITHUB_APP_JENKINS_INFRA_UPDATECLI_PRIVATE_KEY}"
                    owner: "jenkins-infra"
                    scope: GLOBAL
                - usernamePassword:
                    description: "Credentials to access an artifact caching proxy"
                    id: "artifact-caching-proxy-credentials"
                    password: "${ARTIFACT_CACHING_PROXY_PASSWORD}"
                    scope: GLOBAL
                    username: "MY-USERNAME"
                - basicSSHUserPrivateKey:
                    scope: SYSTEM
                    id: "ec2-agents-privkey"
                    username: "key"
                    description: "SSH privkey used to connect to EC2 agents"
                    privateKeySource:
                      directEntry:
                        privateKey: "${EC2_AGENTS_PRIVKEY}"
                - aws:
                    accessKey: "${EC2_AWS_ACCESS_KEY_ID}"
                    description: "This credential is used to provision dynamic agents on AWS EC2"
                    id: "ec2-agents-credentials"
                    scope: SYSTEM
                    secretKey: "${EC2_AWS_SECRET_ACCESS_KEY}"
                - azure:
                    azureEnvironmentName: "Azure"
                    clientId: "${JENKINSINFRA_AZURE_CLIENT_ID}"
                    clientSecret: "${JENKINSINFRA_AZURE_CLIENT_SECRET_VALUE}"
                    description: "azure Service Principal"
                    id: "az-agents-credentials"
                    scope: SYSTEM
                    subscriptionId: "${JENKINSINFRA_AZURE_SUBSCRIPTION_ID}"
                    tenant: "${JENKINSINFRA_AZURE_TENANT_ID}"
                - usernamePassword:
                    description: "Credentials to access the azure agents VMs"
                    id: "azure-login"
                    password: "${AZURE_LOGIN_VM_PASS}"
                    scope: SYSTEM
                    username: "${AZURE_LOGIN_VM_USER}"
                - file:
                    fileName: "kubeconfig"
                    id: "kubeconfig-controller"
                    description: "Kubeconfig file for privatek8s"
                    scope: SYSTEM
                    secretBytes: "${base64:${KUBECONFIG_PRIVATEK8S}}"
      agent-settings: |
        jenkins:
          numExecutors: 0
          clouds:
            - kubernetes:
                containerCapStr: "100"
                # Controller URL to allow agent to connect to it. Prefers using the Kubernetes Service as an internal URL.
                jenkinsUrl: "http://jenkins-infra.jenkins-infra.svc.cluster.local:8080"
                maxRequestsPerHostStr: "300"
                webSocket: true
                name: "kubernetes"
                namespace: "jenkins-infra-agents"
                podRetention: "Never"
                podLabels:
                  # Required to be jenkins/<helm-release>-jenkins-slave as defined here
                  # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                  - key: "jenkins/jenkins-infra-agent"
                    value: "true"
                templates:
                  - name: jnlp-linux
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:latest-jdk11"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/java/openjdk/bin/java"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        alwaysPullImage: true
                    yamlMergeStrategy: "merge"
                    yaml: |-
                      apiVersion: v1
                      kind: Pod
                      spec:
                        tolerations:
                        - key: "jenkins"
                          operator: "Equal"
                          value: "infra.ci.jenkins.io"
                          effect: "NoSchedule"
                        - key: "kubernetes.azure.com/scalesetpriority"
                          operator: "Equal"
                          value: "spot"
                          effect: "NoSchedule"
                  - name: jnlp-windows
                    nodeSelector: "kubernetes.io/os=windows"
                    instanceCap: 5 # Usual sizing is 2 pods per Windows node, and max 3 windows nodes
                    instanceCapStr: "5"
                    containers:
                      - name: jnlp
                        image: "jenkinsciinfra/inbound-agent:windowsservercore-1809"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "C:/openjdk-11"
                        - envVar:
                            key: "JAVA_HOME"
                            value: "C:/openjdk-11"
                        command: "powershell"
                        args: "C:/ProgramData/Jenkins/jenkins-agent.ps1"
                        resourceLimitCpu: "1"
                        resourceLimitMemory: "1024Mi"
                        resourceRequestCpu: "1"
                        resourceRequestMemory: "1024Mi"
                        alwaysPullImage: true
                        workingDir: "C:\\Users\\jenkins"
                    yamlMergeStrategy: "merge"
                    label: "windows-2019-kubernetes"
                    yaml: |-
                      affinity:
                        nodeAffinity:
                          requiredDuringSchedulingIgnoredDuringExecution:
                            nodeSelectorTerms:
                            - matchExpressions:
                              - key: kubernetes.io/os
                                operator: In
                                values:
                                  - windows
                  - name: "jnlp-webbuilder"
                    nodeSelector: "kubernetes.io/os=linux"
                    yaml: |-
                      apiVersion: v1
                      kind: Pod
                      spec:
                        tolerations:
                        - key: "jenkins"
                          operator: "Equal"
                          value: "infra.ci.jenkins.io"
                          effect: "NoSchedule"
                        - key: "kubernetes.azure.com/scalesetpriority"
                          operator: "Equal"
                          value: "spot"
                          effect: "NoSchedule"
                    containers:
                      - name: "jnlp"
                        image: "jenkinsciinfra/builder@sha256:a4abe24f01e7162f0208d1a216a867a98080072ee4e4ca4d5899f7e3388aa482"
                        command: "/usr/local/bin/jenkins-agent"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_OPTS"
                            value: "-XX:+PrintCommandLineFlags"
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/java/openjdk/bin/java"
                        - envVar:
                            key: "PATH"
                            value: "~/.asdf/shims:~/.asdf/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
                        - envVar:
                            key: "ARTIFACT_CACHING_PROXY_PROVIDER"
                            value: "azure"
                        resourceLimitCpu: "4"
                        resourceLimitMemory: "8G"
                        resourceRequestCpu: "4"
                        resourceRequestMemory: "8G"
                    label: "container kubernetes node ruby webbuilder"
                    yamlMergeStrategy: "merge"
            - amazonEC2:
                cloudName: "aws-us-east-2"
                credentialsId: "ec2-agents-credentials"
                instanceCapStr: "50"
                noDelayProvisioning: true
                region: "us-east-2"
                sshKeysCredentialsId: "ec2-agents-privkey"
                useInstanceProfileForCredentials: false
                templates:
                - ami: "ami-0f2e922a890f4580e" # https://github.com/jenkins-infra/packer-images/ LINUXAMD64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L73)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "AMD64 Ubuntu 20.04"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW           # Secure: more flexible to save some time at startup
                  idleTerminationMinutes: "5"
                  instanceCapStr: "50"
                  javaPath: "/opt/jdk-11/bin/java"
                  labelString: "linux-amd64 linux-amd64-docker"
                  launchTimeoutStr: "180"
                  maxTotalUses: 1
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: true
                  numExecutors: 1
                  remoteAdmin: "jenkins"
                  remoteFS: "/home/jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "amd64"
                  - name: "os"
                    value: "linux"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  type: T3Medium # 2 vCPUs / 4 Gb
                  useEphemeralDevices: true
                - ami: "ami-0f2e922a890f4580e" # https://github.com/jenkins-infra/packer-images/ LINUXAMD64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L73)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "AMD64 Ubuntu 20.04 Big"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW           # Secure: more flexible to save some time at startup
                  idleTerminationMinutes: "5"
                  instanceCapStr: "50"
                  javaPath: "/opt/jdk-11/bin/java"
                  labelString: "linux-amd64-big linux-amd64-docker-big highmem"
                  launchTimeoutStr: "180"
                  maxTotalUses: 1
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: true
                  numExecutors: 1
                  remoteAdmin: "jenkins"
                  remoteFS: "/home/jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "amd64"
                  - name: "os"
                    value: "linux"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  type: T3Xlarge # 4 vCPUs / 16 Gb
                  useEphemeralDevices: true
                - ami: "ami-0aeadfbb8d9a65727" # https://github.com/jenkins-infra/packer-images/ LINUXARM64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L82)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "ARM64 Ubuntu 20.04"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW           # Secure: more flexible to save some time at startup
                  idleTerminationMinutes: "5"
                  instanceCapStr: "50"
                  javaPath: "/opt/jdk-11/bin/java"
                  labelString: "arm64 linux-arm64 linux-arm64-docker"
                  launchTimeoutStr: "180"
                  maxTotalUses: 1
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: true
                  numExecutors: 1
                  remoteAdmin: "jenkins"
                  remoteFS: "/home/jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "arm64"
                  - name: "os"
                    value: "linux"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  type: T4gMedium # 2 vCPUs ARM64 Graviton / 4 Gb
                  useEphemeralDevices: true
                - ami: "ami-02945ee48e3c08868" # https://github.com/jenkins-infra/packer-images/ WINDOWSAMD64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L91)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "Windows 2019 AMD64"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW     # TODO: set it CHECK_NEW_HARD (slower but safer)
                  idleTerminationMinutes: "30"                # Windows instances are billed per hour, let's reuse
                  instanceCapStr: "50"
                  javaPath: "C:/tools/jdk-11/bin/java.exe"
                  labelString: "windows windows-amd64 windows-amd64-docker docker-windows"
                  launchTimeoutStr: "600"                     # Wait for Windows to start all the EC2 launch services
                  maxTotalUses: 10                            # Windows instances are billed per hour, let's reuse
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: false
                  numExecutors: 1
                  remoteAdmin: "Administrator"
                  remoteFS: "C:/Jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "amd64"
                  - name: "os"
                    value: "windows"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  tenancy: Default
                  tmpDir: "C:\\\\Temp"                          # Mandatory because EC2 plugins assumes SSH = Unix and searches for /tmp
                  type: T3Medium # 2 vCPUs / 4 Gb
                  useEphemeralDevices: true
            - azureVM:
                azureCredentialsId: "az-agents-credentials"
                cloudName: "azure cloud"
                deploymentTimeout: 1200
                existingResourceGroupName: "infra-agents"
                maxVirtualMachinesLimit: 50
                resourceGroupReferenceType: "existing"
                vmTemplates:
                - agentLaunchMethod: "SSH"
                  agentWorkspace: "/home/jenkins"
                  credentialsId: "azure-login"
                  diskType: "managed"
                  doNotUseMachineIfInitFails: true
                  executeInitScriptAsRoot: true
                  imageReference:
                    galleryImageDefinition: "jenkins-agent-ubuntu-20.04"
                    galleryImageVersion: "0.63.0"
                    galleryName: "prod_packer_images"
                    galleryResourceGroup: "prod-packer-images"
                    gallerySubscriptionId: "${PACKER_AZURE_SUBSCRIPTION_ID}"
                  imageTopLevelType: "advanced"
                  initScript: |-
                    #!/bin/bash
                    set -eux
                    echo "START CLOUDINIT"
                    sed 's/api_key:.*/api_key: ${JENKINS_CI_DATADOG_API_KEY}/' /etc/datadog-agent/datadog.yaml.example > /etc/datadog-agent/datadog.yaml
                    sed -i 's/# site:.*/site: datadoghq.com/' /etc/datadog-agent/datadog.yaml
                    systemctl stop datadog-agent.service
                    mkdir -p /var/log/datadog /etc/datadog-agent
                    chown dd-agent:dd-agent /etc/datadog-agent/datadog.yaml
                    chmod 640 /etc/datadog-agent/datadog.yaml
                    chown dd-agent:dd-agent /var/log/datadog
                    chmod 770 /var/log/datadog
                    systemctl start datadog-agent.service
                    rm -f /etc/sudoers.d/90-cloud-init-users
                    echo "END CLOUDINIT"
                  javaPath: "/opt/jdk-11/bin/java"
                  jvmOptions: "-XX:+PrintCommandLineFlags"
                  labels: "linux-amd64 linux-amd64-docker"
                  location: "East US 2"
                  maxVirtualMachinesLimit: 50
                  existingStorageAccountName: "${AZURE_STORAGE_ACCOUNT}"
                  noOfParallelJobs: 1
                  osDiskSize: 150
                  osDiskStorageAccountType: "Premium_LRS"
                  osType: "Linux"
                  retentionStrategy: "azureVMCloudOnce"
                  spotInstance: true
                  storageAccountNameReferenceType: "existing"
                  storageAccountType: "Standard_LRS"
                  subnetName: "privatek8s-tier"
                  templateDesc: "Dynamically provisioned Ubuntu 20.04 LTS machine"
                  templateName: "ubuntu-20"
                  usageMode: NORMAL
                  usePrivateIP: false
                  virtualMachineSize: "Standard_D4s_v3" # 4 vCPUs / 16 Gb
                  virtualNetworkName: "private-vnet"
                  virtualNetworkResourceGroupName: "private"
                - agentLaunchMethod: "SSH"
                  agentWorkspace: "C:/Jenkins"
                  credentialsId: "azure-login"
                  diskType: "managed"
                  doNotUseMachineIfInitFails: true
                  executeInitScriptAsRoot: true
                  imageReference:
                    galleryImageDefinition: "jenkins-agent-windows-2019"
                    galleryImageVersion: "0.63.0"
                    galleryName: "prod_packer_images"
                    galleryResourceGroup: "prod-packer-images"
                    gallerySubscriptionId: "${PACKER_AZURE_SUBSCRIPTION_ID}"
                  imageTopLevelType: "advanced"
                  initScript: |-
                    (Get-Content C:\ProgramData\Datadog\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: ${JENKINS_CI_DATADOG_API_KEY}' | Set-Content C:\ProgramData\Datadog\datadog.yaml
                  javaPath: "C:/tools/jdk-11/bin/java"
                  jvmOptions: "-XX:+PrintCommandLineFlags"
                  labels: "windows-2019 amd64 azure vm docker-windows docker-windows-2019 windows"
                  location: "East US 2"
                  maxVirtualMachinesLimit: 50
                  existingStorageAccountName: "${AZURE_STORAGE_ACCOUNT}"
                  noOfParallelJobs: 1
                  osDiskSize: 150
                  osDiskStorageAccountType: "Premium_LRS"
                  osType: "Windows"
                  retentionStrategy: "azureVMCloudOnce"
                  spotInstance: true
                  storageAccountNameReferenceType: "existing"
                  storageAccountType: "Standard_LRS"
                  subnetName: "privatek8s-tier"
                  templateDesc: "Dynamically provisioned Windows 2019 machine"
                  templateName: "win-2019"
                  usageMode: NORMAL
                  usePrivateIP: false
                  virtualMachineSize: "Standard_D4s_v3" # 4 vCPUs / 16 Gb
                  virtualNetworkName: "private-vnet"
                  virtualNetworkResourceGroupName: "private"
      security: |
        security:
          scriptApproval:
            approvedSignatures:
              - "method org.jenkinsci.plugins.workflow.steps.FlowInterruptedException getCauses"
              - "new java.lang.RuntimeException java.lang.Throwable"
          gitHostKeyVerificationConfiguration:
            sshHostKeyVerificationStrategy:
              manuallyProvidedKeyVerificationStrategy:
                approvedHostKeys: "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
      ldap-settings: |
        jenkins:
          securityRealm:
            ldap:
              configurations:
                - server: "${LDAP_SERVER}"
                  rootDN: "${LDAP_ROOT_DN}"
                  managerDN: "${LDAP_MANAGER_DN}"
                  managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
                  mailAddressAttributeName: "mail"
                  userSearch: cn={0}
                  userSearchBase: "ou=people"
                  groupSearchBase: "ou=groups"
              disableMailAddressResolver: false
              groupIdStrategy: "caseInsensitive"
              userIdStrategy: "caseInsensitive"
              cache:
                size: 100
                ttl: 300
      advisor-settings: |
        jenkins:
          disabledAdministrativeMonitors:
            - com.cloudbees.jenkins.plugins.advisor.Reminder
        advisor:
          acceptToS: true
          ccs:
          - "damien.duportal@gmail.com"
          email: "jenkins-infra-team@googlegroups.com"
          excludedComponents:
            - "ItemsContent"
            - "GCLogs"
            - "Agents"
            - "RootCAs"
            - "SlaveLogs"
            - "HeapUsageHistogram"
          nagDisabled: true
      pipeline-library: |
        unclassified:
          location:
            url: "https://infra.ci.jenkins.io"
          globalLibraries:
            libraries:
            - cachingConfiguration:
                excludedVersionsStr: "pull/"
                refreshTimeMinutes: 180
              defaultVersion: "master"
              implicit: true
              name: "pipeline-library"
              includeInChangesets: false
              retriever:
                modernSCM:
                  scm:
                    git:
                      credentialsId: "github-app-infra"
                      remote: "https://github.com/jenkins-infra/pipeline-library.git"
      artifact-caching-proxy: |
        unclassified:
          globalConfigFiles:
            configs:
            - mavenSettings:
                comment: "Artifact caching proxy settings for the AWS provider"
                content: |
                  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                    <mirrors>
                      <mirror>
                          <id>aws-proxy</id>
                          <url>https://repo.aws.jenkins.io/public/</url>
                          <mirrorOf>*,!incrementals,!elementary-releases,!chimera-releases,!chimera-snapshots,!atlassian-public</mirrorOf>
                      </mirror>
                      <mirror>
                          <id>aws-proxy-incrementals</id>
                          <url>https://repo.aws.jenkins.io/incrementals/</url>
                          <mirrorOf>incrementals</mirrorOf>
                      </mirror>
                    </mirrors>
                  </settings>
                id: "artifact-caching-proxy-aws"
                isReplaceAll: true
                name: "AWS Artifact Caching Proxy"
                providerId: "org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig"
                serverCredentialMappings:
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "aws-proxy"
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "aws-proxy-incrementals"
            - mavenSettings:
                comment: "Artifact caching proxy settings for the Azure provider"
                content: |
                  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                    <mirrors>
                      <mirror>
                          <id>azure-proxy</id>
                          <url>https://repo.azure.jenkins.io/public/</url>
                          <mirrorOf>*,!incrementals,!elementary-releases,!chimera-releases,!chimera-snapshots,!atlassian-public</mirrorOf>
                      </mirror>
                      <mirror>
                          <id>azure-proxy-incrementals</id>
                          <url>https://repo.azure.jenkins.io/incrementals/</url>
                          <mirrorOf>incrementals</mirrorOf>
                      </mirror>
                    </mirrors>
                  </settings>
                id: "artifact-caching-proxy-azure"
                isReplaceAll: true
                name: "Azure Artifact Caching Proxy"
                providerId: "org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig"
                serverCredentialMappings:
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "azure-proxy"
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "azure-proxy-incrementals"
            - mavenSettings:
                comment: "Artifact caching proxy settings for the DigitalOcean provider"
                content: |
                  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
                    <mirrors>
                      <mirror>
                          <id>do-proxy</id>
                          <url>https://repo.do.jenkins.io/public/</url>
                          <mirrorOf>*,!incrementals,!elementary-releases,!chimera-releases,!chimera-snapshots,!atlassian-public</mirrorOf>
                      </mirror>
                      <mirror>
                          <id>do-proxy-incrementals</id>
                          <url>https://repo.do.jenkins.io/incrementals/</url>
                          <mirrorOf>incrementals</mirrorOf>
                      </mirror>
                    </mirrors>
                  </settings>
                id: "artifact-caching-proxy-do"
                isReplaceAll: true
                name: "DigitalOcean Artifact Caching Proxy"
                providerId: "org.jenkinsci.plugins.configfiles.maven.MavenSettingsConfig"
                serverCredentialMappings:
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "do-proxy"
                - credentialsId: "artifact-caching-proxy-credentials"
                  serverId: "do-proxy-incrementals"
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "GROUP:Job/Build:authenticated"
                - "GROUP:Job/ExtendedRead:authenticated"
                - "GROUP:Job/Read:authenticated"
                - "GROUP:Overall/Administer:admins"
                - "GROUP:Overall/Administer:jenkins-admins"
                - "GROUP:Overall/Read:authenticated"
                - "GROUP:Overall/SystemRead:authenticated"
      pipeline-settings: |
        unclassified:
          timestamper:
            allPipelines: true
          shell:
            shell: "/bin/bash"
      system-settings: |
        unclassified:
          defaultFolderConfiguration:
            # Keep healthMetrics an empty list to ensure weather is disabled
            healthMetrics: []
        jenkins:
          quietPeriod: 0 # No need to wait between build scheduling
          disabledAdministrativeMonitors:
            - "jenkins.security.QueueItemAuthenticatorMonitor"
      datadog: |
        unclassified:
          datadogGlobalConfiguration:
            ciInstanceName: "infra.ci.jenkins.io"
            collectBuildLogs: false
            # Send events on configuration changes to jobs or changes to jenkins. These events include changes by the system which may be frequent and redundant.
            emitConfigChangeEvents: true
            emitSecurityEvents: true
            emitSystemEvents: true
            enableCiVisibility: true
            hostname: "infra.ci.jenkins.io"
            # A list of tags to apply globally to all submissions.
            globalTags: "controller:infra.ci.jenkins.io"
            # Refresh Dogstatsd Client when your agent IP changes
            refreshDogstatsdClient: true
            reportWith: "DSD"
            retryLogs: true
            targetApiURL: "https://api.datadoghq.com/api/"
            targetHost: "datadog.datadog.svc.cluster.local"
            targetLogIntakeURL: "https://http-intake.logs.datadoghq.com/v1/input/"
            targetPort: 8125
            targetTraceCollectionPort: 8126
      tools-config: |
        tool:
          jdk:
            installations:
            - name: "jdk8"
              properties:
              - installSource:
                  installers:
                  - zip:
                      label: "linux && amd64"
                      subdir: "jdk8u345-b01"
                      url: "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u345-b01/OpenJDK8U-jdk_x64_linux_hotspot_8u345b01.tar.gz"
                  - zip:
                      label: "windows"
                      subdir: "jdk8u345-b01"
                      url: "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u345-b01/OpenJDK8U-jdk_x64_windows_hotspot_8u345b01.zip"
                  - zip:
                      label: "linux && arm64"
                      subdir: "jdk8u345-b01"
                      url: "https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u345-b01/OpenJDK8U-jdk_aarch64_linux_hotspot_8u345b01.tar.gz"
            - name: "jdk11"
              properties:
              - installSource:
                  installers:
                  - zip:
                      label: "linux && amd64"
                      subdir: "jdk-11.0.16.1+1"
                      url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1+1/OpenJDK11U-jdk_x64_linux_hotspot_11.0.16.1_1.tar.gz"
                  - zip:
                      label: "windows"
                      subdir: "jdk-11.0.16.1+1"
                      url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1+1/OpenJDK11U-jdk_x64_windows_hotspot_11.0.16.1_1.zip"
                  - zip:
                      label: "linux && arm64"
                      subdir: "jdk-11.0.16.1+1"
                      url: "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.16.1+1/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.16.1_1.tar.gz"
            - name: "jdk17"
              properties:
              - installSource:
                  installers:
                  - zip:
                      label: "linux && amd64"
                      subdir: "jdk-17.0.4.1+1"
                      url: "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1+1/OpenJDK17U-jdk_x64_linux_hotspot_17.0.4.1_1.tar.gz"
                  - zip:
                      label: "windows"
                      subdir: "jdk-17.0.4.1+1"
                      url: "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1+1/OpenJDK17U-jdk_x64_windows_hotspot_17.0.4.1_1.zip"
                  - zip:
                      label: "linux && arm64"
                      subdir: "jdk-17.0.4.1+1"
                      url: "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.4.1+1/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.4.1_1.tar.gz"
          maven:
            installations:
            - name: "mvn"
              properties:
              - installSource:
                  installers:
                  - maven:
                      id: "3.9.0"
  sidecars:
    configAutoReload:
      env:
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: METHOD
          # Polling mode (instead of watching kube API)
          value: "SLEEP"
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: SLEEP_TIME
          # Time in seconds between two polls
          value: "60"
  installPlugins: false
  ingress:
    enabled: true
    hostName: infra.ci.jenkins.io
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/proxy-body-size": "500m"
    ingressClassName: private-nginx
    tls:
      - hosts:
          - infra.ci.jenkins.io
        secretName: infra.ci.jenkins.io-cert
  secondaryingress:
    enabled: true
    paths:
      - /github-webhook
    hostName: infra-webhooks.ci.jenkins.io
    ingressClassName: public-nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/ssl-redirect": "true"
    tls:
      - hosts:
          - infra-webhooks.ci.jenkins.io
        secretName: infra-webhooks.ci.jenkins.io-cert
