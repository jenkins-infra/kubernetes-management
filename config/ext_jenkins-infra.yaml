serviceAccount:
  create: true
  name: jenkins-controller
serviceAccountAgent:
  create: true
  name: jenkins-agent
rbac:
  create: true
  readSecrets: true
persistence:
  enabled: true
  size: 50Gi
agent:
  componentName: "agent"
networkPolicy:
  enabled: true
  internalAgents:
    allowed: true
    namespaceLabels:
      name: "jenkins-infra"
controller:
  image: jenkinsciinfra/jenkins-weekly
  tag: 0.82.2-2.372
  imagePullPolicy: IfNotPresent
  nodeSelector:
    kubernetes.io/os: linux
  resources:
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "2"
      memory: "4Gi"
  probes:
    startupProbe:
      initialDelaySeconds: 120
    livenessProbe:
      initialDelaySeconds: 120
    readinessProbe:
      initialDelaySeconds: 120
  testEnabled: false
  podSecurityContextOverride:
    runAsNonRoot: true
    runAsUser: 1000
    supplementalGroups: [1000]
  overwritePlugins: true
  serviceType: "ClusterIP"
  javaOpts: >-
    -XshowSettings:vm -XX:+UseStringDeduplication -XX:+ParallelRefProcEnabled -XX:+DisableExplicitGC -XX:MaxRAM=4g -XX:+AlwaysPreTouch -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/ -XX:+UseG1GC -Dorg.csanchez.jenkins.plugins.kubernetes.pipeline.ContainerExecDecorator.websocketConnectionTimeout=60
  JCasC:
    enabled: true
    defaultConfig: false
    configScripts:
      security: |
        security:
          scriptApproval:
            approvedSignatures:
              - "method org.jenkinsci.plugins.workflow.steps.FlowInterruptedException getCauses"
              - "new java.lang.RuntimeException java.lang.Throwable"
          gitHostKeyVerificationConfiguration:
            sshHostKeyVerificationStrategy:
              manuallyProvidedKeyVerificationStrategy:
                approvedHostKeys: "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl"
      credentials: |
        credentials:
          system:
            domainCredentials:
              - credentials:
                - gitHubApp:
                    appID: "${GITHUB_APP_ID}"
                    description: "GitHub App for infra.ci.jenkins.io"
                    id: "github-app-infra"
                    privateKey: "${GITHUB_APP_PRIVATE_KEY}"
                    scope: GLOBAL
                - gitHubApp:
                    appID: "${GITHUB_APP_JENKINS_INFRA_UPDATECLI_ID}"
                    description: "GitHub App for updatecli tasks on jenkins-infra org"
                    id: "github-app-updatecli-on-jenkins-infra"
                    privateKey: "${GITHUB_APP_JENKINS_INFRA_UPDATECLI_PRIVATE_KEY}"
                    owner: "jenkins-infra"
                    scope: GLOBAL
                - file:
                    fileName: "kubeconfig"
                    id: "kubeconfig-controller-temp-privatek8s"
                    description: "Kubeconfig file for temp-privatek8s"
                    scope: SYSTEM
                    secretBytes: "${base64:${KUBECONFIG_TEMP_PRIVATEK8S}}"
                - basicSSHUserPrivateKey:
                    scope: SYSTEM
                    id: "ec2-agents-privkey"
                    username: "key"
                    description: "SSH privkey used to connect to EC2 agents"
                    privateKeySource:
                      directEntry:
                        privateKey: "${EC2_AGENTS_PRIVKEY}"
                - aws:
                    accessKey: "${EC2_AWS_ACCESS_KEY_ID}"
                    description: "This credential is used to provision dynamic agents on AWS EC2"
                    id: "ec2-agents-credentials"
                    scope: SYSTEM
                    secretKey: "${EC2_AWS_SECRET_ACCESS_KEY}"
      agent-settings: |
        jenkins:
          numExecutors: 0
          clouds:
            - kubernetes:
                containerCapStr: "100"
                # Kubernetes internal URL to stay within private networks
                jenkinsUrl: "http://jenkins-infra.jenkins-infra.svc.cluster.local:8080"
                maxRequestsPerHostStr: "300"
                webSocket: true
                name: "kubernetes"
                namespace: "jenkins-agents"
                podRetention: "Never"
                serverUrl: ${AGENTS_KUBERNETES_CLUSTER_URL}
                credentialsId: "kubeconfig-controller-temp-privatek8s"
                serverCertificate: |
                  ${AGENTS_KUBERNETES_CLUSTER_CERT}
                podLabels:
                  # Required to be jenkins/<helm-release>-jenkins-slave as defined here
                  # https://github.com/helm/charts/blob/ef0d749132ecfa61b2ea47ccacafeaf5cf1d3d77/stable/jenkins/templates/jenkins-master-networkpolicy.yaml#L27
                  - key: "jenkins/jenkins-infra-agent"
                    value: "true"
                templates:
                  - name: jnlp-linux
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp
                        image: "jenkins/inbound-agent:latest-jdk11"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/java/openjdk/bin/java"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        alwaysPullImage: true
                    yamlMergeStrategy: "merge"
                  - name: jnlp-beta-11
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp-beta
                        image: "jenkinsciinfra/jenkins-agent-ubuntu-20.04"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/jdk11/bin/java"
                        - envVar:
                            key: "JAVA_HOME"
                            value: "/opt/jdk-11"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        alwaysPullImage: true
                    yamlMergeStrategy: "merge"
                    label: "ubuntu-20-04-beta-11"
                  - name: jnlp-beta-17
                    nodeSelector: "kubernetes.io/os=linux"
                    containers:
                      - name: jnlp-beta
                        image: "jenkinsciinfra/jenkins-agent-ubuntu-20.04"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "/opt/jdk11/bin/java"
                        - envVar:
                            key: "JAVA_HOME"
                            value: "/opt/jdk-17"
                        resourceLimitCpu: "500m"
                        resourceLimitMemory: "512Mi"
                        resourceRequestCpu: "500m"
                        resourceRequestMemory: "512Mi"
                        alwaysPullImage: true
                    yamlMergeStrategy: "merge"
                    label: "ubuntu-20-04-beta-17"
                  - name: jnlp-windows
                    nodeSelector: "kubernetes.io/os=windows"
                    instanceCap: 5 # Usual sizing is 2 pods per Windows node, and max 3 windows nodes
                    instanceCapStr: "5"
                    containers:
                      - name: jnlp
                        image: "jenkinsciinfra/inbound-agent:windowsservercore-1809"
                        envVars:
                        - envVar:
                            key: "JENKINS_JAVA_BIN"
                            value: "C:/openjdk-11"
                        - envVar:
                            key: "JAVA_HOME"
                            value: "C:/openjdk-11"
                        command: "powershell"
                        args: "C:/ProgramData/Jenkins/jenkins-agent.ps1"
                        resourceLimitCpu: "1"
                        resourceLimitMemory: "1024Mi"
                        resourceRequestCpu: "1"
                        resourceRequestMemory: "1024Mi"
                        alwaysPullImage: true
                        workingDir: "C:\\Users\\jenkins"
                    yamlMergeStrategy: "merge"
                    label: "windows-2019-kubernetes"
                    yaml: |-
                      affinity:
                        nodeAffinity:
                          requiredDuringSchedulingIgnoredDuringExecution:
                            nodeSelectorTerms:
                            - matchExpressions:
                              - key: kubernetes.io/os
                                operator: In
                                values:
                                  - windows
            - amazonEC2:
                cloudName: "aws-us-east-2"
                credentialsId: "ec2-agents-credentials"
                instanceCapStr: "50"
                noDelayProvisioning: true
                region: "us-east-2"
                sshKeysCredentialsId: "ec2-agents-privkey"
                useInstanceProfileForCredentials: false
                templates:
                - ami: "ami-0f4393a128e206971" # https://github.com/jenkins-infra/packer-images/ LINUXAMD64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L73)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "AMD64 Ubuntu 20.04"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW           # Secure: more flexible to save some time at startup
                  idleTerminationMinutes: "5"
                  instanceCapStr: "50"
                  javaPath: "/opt/jdk-11/bin/java"
                  labelString: "linux-amd64 linux-amd64-docker"
                  launchTimeoutStr: "180"
                  maxTotalUses: 1
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: true
                  numExecutors: 1
                  remoteAdmin: "jenkins"
                  remoteFS: "/home/jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "amd64"
                  - name: "os"
                    value: "linux"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  type: T3Medium
                  useEphemeralDevices: true
                - ami: "ami-0cde36a8948d6c3b7" # https://github.com/jenkins-infra/packer-images/ LINUXARM64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L82)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "ARM64 Ubuntu 20.04"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW           # Secure: more flexible to save some time at startup
                  idleTerminationMinutes: "5"
                  instanceCapStr: "50"
                  javaPath: "/opt/jdk-11/bin/java"
                  labelString: "arm64 linux-arm64 linux-arm64-docker"
                  launchTimeoutStr: "180"
                  maxTotalUses: 1
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: true
                  numExecutors: 1
                  remoteAdmin: "jenkins"
                  remoteFS: "/home/jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "arm64"
                  - name: "os"
                    value: "linux"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  type: T4gMedium
                  useEphemeralDevices: true
                - ami: "ami-0b152f16f46c75778" # https://github.com/jenkins-infra/packer-images/ WINDOWSAMD64 (DO NOT DELETE OR EDIT THIS COMMENT, USED BY UPDATECLI: https://github.com/jenkins-infra/kubernetes-management/blob/cd7e4132eef4095ca287e8c17b284d3c04234cb4/updatecli/updatecli.d/charts/jenkins-agents-infra-release.yaml#L91)
                  amiOwners: "200564066411"
                  associatePublicIp: true
                  connectBySSHProcess: false
                  connectionStrategy: PUBLIC_IP
                  deleteRootOnTermination: true
                  description: "Windows 2019 AMD64"
                  ebsOptimized: false
                  hostKeyVerificationStrategy: ACCEPT_NEW     # TODO: set it CHECK_NEW_HARD (slower but safer)
                  idleTerminationMinutes: "30"                # Windows instances are billed per hour, let's reuse
                  instanceCapStr: "50"
                  javaPath: "C:/tools/jdk-11/bin/java.exe"
                  labelString: "windows windows-amd64 windows-amd64-docker docker-windows"
                  launchTimeoutStr: "600"                     # Wait for Windows to start all the EC2 launch services
                  maxTotalUses: 10                            # Windows instances are billed per hour, let's reuse
                  minimumNumberOfInstances: 0
                  minimumNumberOfSpareInstances: 0
                  mode: EXCLUSIVE
                  monitoring: false
                  numExecutors: 1
                  remoteAdmin: "Administrator"
                  remoteFS: "C:/Jenkins"
                  securityGroups: "ec2_agents_infraci"
                  stopOnTerminate: false
                  t2Unlimited: false
                  tags:
                  - name: "architecture"
                    value: "amd64"
                  - name: "os"
                    value: "windows"
                  - name: "jenkins"
                    value: "infra.ci.jenkins.io"
                  tenancy: Default
                  tmpDir: "C:\\\\Temp"                          # Mandatory because EC2 plugins assumes SSH = Unix and searches for /tmp
                  type: T3Medium
                  useEphemeralDevices: true
      ldap-settings: |
        jenkins:
          securityRealm:
            ldap:
              configurations:
                - server: "${LDAP_SERVER}"
                  rootDN: "${LDAP_ROOT_DN}"
                  managerDN: "${LDAP_MANAGER_DN}"
                  managerPasswordSecret: "${LDAP_MANAGER_PASSWORD}"
                  mailAddressAttributeName: "mail"
                  userSearch: cn={0}
                  userSearchBase: "ou=people"
                  groupSearchBase: "ou=groups"
              disableMailAddressResolver: false
              groupIdStrategy: "caseInsensitive"
              userIdStrategy: "caseInsensitive"
              cache:
                size: 100
                ttl: 300
      advisor-settings: |
        jenkins:
          disabledAdministrativeMonitors:
            - com.cloudbees.jenkins.plugins.advisor.Reminder
        advisor:
          acceptToS: true
          ccs:
          - "damien.duportal@gmail.com"
          email: "jenkins-infra-team@googlegroups.com"
          excludedComponents:
            - "ItemsContent"
            - "GCLogs"
            - "Agents"
            - "RootCAs"
            - "SlaveLogs"
            - "HeapUsageHistogram"
          nagDisabled: true
      pipeline-library: |
        unclassified:
          location:
            url: "https://infra.ci.jenkins.io"
          globalLibraries:
            libraries:
            - defaultVersion: "master"
              implicit: true
              name: "pipeline-library"
              includeInChangesets: false
              retriever:
                modernSCM:
                  scm:
                    git:
                      credentialsId: "github-app-infra"
                      remote: "https://github.com/jenkins-infra/pipeline-library.git"
      matrix-settings: |
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
                - "GROUP:Job/Build:authenticated"
                - "GROUP:Job/ExtendedRead:authenticated"
                - "GROUP:Job/Read:authenticated"
                - "GROUP:Overall/Administer:admins"
                - "GROUP:Overall/Administer:jenkins-admins"
                - "GROUP:Overall/Read:authenticated"
                - "GROUP:Overall/SystemRead:authenticated"
      pipeline-settings: |
        unclassified:
          timestamper:
            allPipelines: true
          shell:
            shell: "/bin/bash"
      system-settings: |
        unclassified:
          defaultFolderConfiguration:
            # Keep healthMetrics an empty list to ensure weather is disabled
            healthMetrics: []
        jenkins:
          quietPeriod: 0 # No need to wait between build scheduling
          disabledAdministrativeMonitors:
            - "jenkins.security.QueueItemAuthenticatorMonitor"
      datadog: |
        unclassified:
          datadogGlobalConfiguration:
            ciInstanceName: "infra.ci.jenkins.io"
            collectBuildLogs: false
            # Send events on configuration changes to jobs or changes to jenkins. These events include changes by the system which may be frequent and redundant.
            emitConfigChangeEvents: true
            emitSecurityEvents: true
            emitSystemEvents: true
            enableCiVisibility: true
            hostname: "infra.ci.jenkins.io"
            # A list of tags to apply globally to all submissions.
            globalTags: "controller:infra.ci.jenkins.io"
            # Refresh Dogstatsd Client when your agent IP changes
            refreshDogstatsdClient: true
            reportWith: "DSD"
            retryLogs: true
            targetApiURL: "https://api.datadoghq.com/api/"
            targetHost: "datadog.datadog.svc.cluster.local"
            targetLogIntakeURL: "https://http-intake.logs.datadoghq.com/v1/input/"
            targetPort: 8125
            targetTraceCollectionPort: 8126
  sidecars:
    configAutoReload:
      env:
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: METHOD
          # Polling mode (instead of watching kube API)
          value: "SLEEP"
        # https://github.com/kiwigrid/k8s-sidecar#configuration-environment-variables
        - name: SLEEP_TIME
          # Time in seconds between two polls
          value: "60"
  installPlugins: false
  ingress:
    enabled: true
    hostName: infra.ci.jenkins.io
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/proxy-body-size": "500m"
    ingressClassName: private-nginx
    tls:
      - hosts:
          - infra.ci.jenkins.io
        secretName: infra.ci.jenkins.io-cert
  secondaryingress:
    enabled: true
    paths:
      - /github-webhook
    hostName: infra-webhooks.ci.jenkins.io
    ingressClassName: public-nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"
      "nginx.ingress.kubernetes.io/ssl-redirect": "true"
    tls:
      - hosts:
          - infra-webhooks.ci.jenkins.io
        secretName: infra-webhooks.ci.jenkins.io-cert
