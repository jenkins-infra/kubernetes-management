def cronExpr = env.BRANCH_IS_PRIMARY ? 'H/30 * * * *' : ''

pipeline {
  agent {
    kubernetes {
      yamlFile 'PodTemplates.yaml'
    }
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    timeout(time: 30, unit: 'MINUTES')
    disableConcurrentBuilds()
  }

  triggers {
    cron (cronExpr)
  }

  environment {
    AWS_ACCESS_KEY_ID     = credentials('packer-aws-access-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('packer-aws-secret-access-key')
    AWS_DEFAULT_REGION    = 'us-east-2'
    PRODUCTION_TERRAFORM_AZURE_CLIENT_ID = credentials('production_terraform_azure_client_id')
    PRODUCTION_TERRAFORM_AZURE_CLIENT_SECRET_VALUE = credentials('production_terraform_azure_client_secret_value')
    PRODUCTION_TERRAFORM_AZURE_TENANT_ID = credentials('production_terraform_azure_tenant_id')
  }
  stages {
    stage('Azure Login') {
      steps {
        az login --service-principal \
                -u "${PRODUCTION_TERRAFORM_AZURE_CLIENT_ID}" \
                -p "${PRODUCTION_TERRAFORM_AZURE_CLIENT_SECRET_VALUE}" \
                -t "${PRODUCTION_TERRAFORM_AZURE_TENANT_ID}"
      }
    }
    stage('Check Configuration Update') {
      // Run updatecli's diff on both push and pull requests (in case a configuration change breaks updatecli)
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          updatecli(action: 'diff', cronTriggerExpression: cronExpr)
        }
      }
    } // stage
    stage('Apply Configuration Update') {
      when {
        expression { env.BRANCH_IS_PRIMARY }
      }
      steps {
        updatecli(action: 'apply', cronTriggerExpression: cronExpr)
      }
    }
  }
}
